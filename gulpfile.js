const gulp   = require('gulp'),
      closureCompiler = require('google-closure-compiler').gulp(),
      fs     = require( 'fs' );

gulp.task( 'js', gulp.series(
  function(){
      return gulp.src(
          [
                './lib/index.es6.js'
          ]
      ).pipe(
          closureCompiler(
              {
                  // externs           : externs,
                  // define            : [],
                  // compilation_level : 'ADVANCED',
                  // compilation_level : 'WHITESPACE_ONLY',
                  formatting        : 'PRETTY_PRINT',
                  warning_level     : 'VERBOSE',
                  language_in       : 'ECMASCRIPT_2020',
                  language_out      : 'ECMASCRIPT5',
                  output_wrapper    : '(function(){\n%output%\n})()',
                  js_output_file    : 'ReRE.es5.js'
              }
          )
      ).pipe( gulp.dest( 'lib' ) );
  }
) );

const dontEditMessage = '// THIS SCRIPT IS GENERATED BY "##". DO NOT EDIT!\n\n';

gulp.task( 'data', gulp.series(
    function( cb ){ // Case folding
        var fileName = './tools.js/1_generateUnicodeFoldMap.js';

        fs.writeFileSync(
            './src.js/2_data.generated/1_unicodeFoldMap.generated.js',
            dontEditMessage.replace( '##', fileName ) + require( fileName )()
        );
        cb();
    },
    function( cb ){ // Case folding Legacy
        var fileName = './tools.js/2_generateUnicodeFoldMapLegacy.js';

        fs.writeFileSync(
            './src.js/2_data.generated/2_unicodeFoldMapLegacy.generated.js',
            dontEditMessage.replace( '##', fileName ) + require( fileName )()
        );
        cb();
    },
    function( cb ){ // Unicode Category
      var fileName = './tools.js/3_generateUnicodeCategory.js';

      fs.writeFileSync(
          './src.js/2_data.generated/3_unicodeCategory.generated.js',
          dontEditMessage.replace( '##', fileName ) + require( fileName )()
      );
      cb();
    },
    function( cb ){ // Unicode Property
        var fileName = './tools.js/4_generateUnicodeProperty.js';

        fs.writeFileSync(
            './src.js/2_data.generated/4_unicodeProperty.generated.js',
            dontEditMessage.replace( '##', fileName ) + require( fileName )()
        );
        cb();
    },
    function( cb ){ // Unicode Property Alias
      var fileName = './tools.js/5_generateUnicodePropertyAlias.js';

      fs.writeFileSync(
          './src.js/2_data.generated/5_unicodePropertyAlias.generated.js',
          dontEditMessage.replace( '##', fileName ) + require( fileName )()
      );
      cb();
    },
    function( cb ){ // Unicode Property Value Alias
        var fileName = './tools.js/6_generateUnicodePropertyValueAlias.js';

        fs.writeFileSync(
            './src.js/2_data.generated/6_unicodePropertyValueAlias.generated.js',
            dontEditMessage.replace( '##', fileName ) + require( fileName )()
        );
        cb();
    },
    function( cb ){ // Unicode Script
        var fileName = './tools.js/7_generateUnicodeScript.js';

        fs.writeFileSync(
            './src.js/2_data.generated/7_unicodeScript.generated.js',
            dontEditMessage.replace( '##', fileName ) + require( fileName )()
        );
        cb();
    },
    function( cb ){
        var fileName = './tools.js/8_generateCharSetWordAndUnicodeWord.js';

        fs.writeFileSync(
            './src.js/3_char-class/4_ascii.generated.js',
            dontEditMessage.replace( '##', fileName ) + require( fileName )()
        );
        cb();
    },
    function( cb ){
        var fileName = './tools.js/9_generateCharSetIdStartAndIdContinue';

        fs.writeFileSync(
          './src.js/4_syntax/3_charSetIdStartAndIdContinue.generated.js',
            dontEditMessage.replace( '##', fileName ) + require( fileName )()
        );
        cb();
    },
    function( cb ){
        var fileName = './tools.js/A_generateExterns.js';

        fs.writeFileSync(
            './src.externs/externs.generated.js',
            dontEditMessage.replace( '##', fileName ) + require( fileName )()
        );
        cb();
    }
) );
