// THIS SCRIPT IS GENERATED BY "./tools.js/8_generateCharSetWordAndUnicodeWord.js". DO NOT EDIT!


// See https://www.ecma-international.org/ecma-262/10.0/index.html#sec-characterclassescape.

/** A CharSet which contains ASCII digits. */
var charSetDigit = new CharSet(
    [ 0x30, 0x39 + 1 ] // 0..9
);

/** A CharSet which does not contain ASCII digits. */
var charSetInvertDigit = charSetDigit.clone().invert();

/** A CharSet which contains ASCII word characters. */
var charSetWord = new CharSet( [ 48, 58, 65, 91, 95, 96, 97, 123 ] );

/** A CharSet which does not contain ASCII word characters. */
var charSetInvertWord = charSetWord.clone().invert();

/**
 * A CharSet which contains Unicode word characters.
 *
 * See https://www.ecma-international.org/ecma-262/10.0/index.html#sec-runtime-semantics-wordcharacters-abstract-operation.
 */
var charSetUnicodeWord = new CharSet( [ 48, 58, 65, 91, 95, 96, 97, 123, 383, 384, 8490, 8491 ] );

/** A CharSet which does not contain Unicode word characters. */
var charSetInvertUnicodeWord = charSetUnicodeWord.clone().invert();

/**
 * A CharSet which contains space characters.
 *
 * See https://www.ecma-international.org/ecma-262/10.0/index.html#prod-WhiteSpace
 * and https://www.ecma-international.org/ecma-262/10.0/index.html#prod-LineTerminator.
 */
var charSetSpace = new CharSet( [ 9, 14, 32, 33, 160, 161, 5760, 5761, 8192, 8203, 8239, 8240, 8287, 8288, 12288, 12289, 65279, 65280 ] );

/** A CharSet which does not contain space characters. */
var charSetInvertSpace = charSetSpace.clone().invert();
